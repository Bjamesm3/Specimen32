<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Enemy_P_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp = global.max_soldier_hp;
can_see = false; //to spot player
timer = 40;    //change sprite
path_start(path10, 2, path_action_continue, true);
fov_range = 220; //field of view
target = -1;     //fov stuff
LenX = 28; //shootting stuff
LenY = 1;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//pistol shooting

    var bullet_id;
    bullet_id = instance_create(x + lengthdir_x(LenX, image_angle) - lengthdir_y(LenY, image_angle), y + lengthdir_y(LenX, image_angle) + lengthdir_x(LenY, image_angle), Enemy_bullet);
    bullet_id.direction = image_angle;
    bullet_id.image_angle = bullet_id.direction;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>rifleSound</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = direction;

//check if dead
if(hp &lt;= 0)
{
    instance_destroy();
}
//FOV
player_go_to = instance_nearest(x,y,Player);
player_x = (player_go_to.x);      //div 32) *32+16;
player_y = (player_go_to.y);     //div 32) *32+16;

dir = point_direction (x,y,player_x,player_y);
target = collision_line (x,y,x+lengthdir_x(fov_range,dir),y+lengthdir_y(fov_range,dir),player_go_to,true,true);

if instance_exists (target) &amp;&amp; distance_to_point(player_x,player_y) &lt; fov_range
{
    if (not collision_line (x,y,target.x,target.y,wall_obj,true,true) || not collision_line (x,y,target.x,target.y,Door_obj,true,true))
    {
        // Determine if a target is within a 120 degree cone of vision.
        var directionToTarget = point_direction (x, y,player_x,player_y);
        var angleToTarget = angle_difference (directionToTarget, direction);
        
        if (abs (angleToTarget) &lt; 60)    // The target can be seen!
        {       
            //Image Angle    
            can_see = true;
            global.alert = true;
            var pd = point_direction(x, y, player_x, player_y);
            var dd = angle_difference(image_angle, pd);  
            image_angle -= min(abs(dd), 10) * sign(dd); 
            path_end();
            if(alarm[2] == -1)
            {
                alarm[2] = 8;
            }
        }
        else 
        {
            can_see = false;
        }
    }
} 
else 
{
    can_see = false;
}


//if alert true 
//enemy shoots
//if alert true but can_see false
//enemy moves to last spotted position and looks again


//movement
//
//
timer -= 1;

    if(timer == 0)
    {
        timer = 40
    }
    
    //PISTOL SPRITES
    if(global.pistol == true )
    {
         if(timer &lt; 40 &amp;&amp; timer &gt; 30)
         {
            sprite_index = Enemy_P_R
            draw_sprite(Enemy_P_R, 0, x, y)
        }
        else if(timer &lt; 30 &amp;&amp; timer &gt; 20 )
        {
            sprite_index = Enemy_P_idle
            draw_sprite(Enemy_P_idle, 0, x, y)
        }
        else if(timer &lt; 20 &amp;&amp; timer &gt; 10)
        {
             sprite_index =  Enemy_P_L
            draw_sprite(Enemy_P_L, 0, x, y)
        }
        else
        {
              sprite_index = Enemy_P_idle
              draw_sprite(Enemy_P_idle, 0, x, y)
        }
    }
    
//ALERTED

if(global.alert == true)
{
     mp_potential_step(player_x, player_y, 3, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="MG_bullet_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp -= global.mg_damage;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="P_bullet_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp -= global.pistol_damage;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
