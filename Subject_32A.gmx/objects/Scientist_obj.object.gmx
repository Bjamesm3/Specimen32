<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Scientist_idle</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp = global.max_scientist_hp;
motion_add(random(360), 2); //movement
move = true;
cower = false;
checkToStop = 2;
timer = 40; //used for sprite change


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(cower == false &amp;&amp; move == true) //normal movement
{
        timer -= 1;
         if(timer &lt; 40 &amp;&amp; timer &gt; 30)  //changing sprites
         {
            sprite_index = Scientist_L
            draw_sprite(Scientist_L, 0, x, y)
        }
        else if(timer &lt; 30 &amp;&amp; timer &gt; 20 )
        {
            sprite_index = Scientist_idle
            draw_sprite(Scientist_idle, 0, x, y)
        }
        else if(timer &lt; 20 &amp;&amp; timer &gt; 10)
        {
             sprite_index = Scientist_R
            draw_sprite(Scientist_R, 0, x, y)
        }
        else
        {
              sprite_index = Scientist_idle
                draw_sprite(Scientist_idle, 0, x, y)
                timer = 40;
        }
        if(speed &gt; 2)//max speed
        {
            speed = 2;
        }

}
else //COWering or Idle
{
    if(cower == true)
    {
        move = false;
        image_speed = 0;
        sprite_index = Scientist_Cower
        draw_sprite(Scientist_Cower, 0, x, y)
    }
    else
    {
              sprite_index = Scientist_idle
              draw_sprite(Scientist_idle, 0, x, y)
    }
    checkToStop += 1;
}

if(checkToStop &gt; 40 &amp;&amp; checkToStop &lt; 80) //stops the sprite now and then
{
    move = false;
}
else if(checkToStop &gt; 80)
{
    checkToStop = 0;
}
else
{
    move = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Door_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>motion_add(random(360), 2);
image_angle = direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="wall_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>motion_add(random(360), 2);
image_angle = direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
